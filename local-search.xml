<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>git本地版本回退</title>
    <link href="/2025/03/19/git%E6%9C%AC%E5%9C%B0%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/"/>
    <url>/2025/03/19/git%E6%9C%AC%E5%9C%B0%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/</url>
    
    <content type="html"><![CDATA[<h2 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h2><p>提交历史可以用git log命令查看，也可以用git reflog查看，git log会显示所有的提交记录，而git reflog会显示所有的操作记录，包括commit、reset、checkout等操作。如果要回退提交历史的话，两种方式都可以查看，但如果要回退其他一些操作的话，就只有git reflog可以看。</p><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><h4 id="1-git-log默认输出"><a href="#1-git-log默认输出" class="headerlink" title="1.git log默认输出"></a>1.git log默认输出</h4><p>git log如果不带任何参数，它会列出所有历史记录，最近的排在最上方，显示提交对象的哈希值(commit id)，作者、提交日期、和提交说明。按Q退出历史记录列表。</p><h4 id="2-git-log带后缀"><a href="#2-git-log带后缀" class="headerlink" title="2.git log带后缀"></a>2.git log带后缀</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell">git log --pretty=oneline # 一行显示<br>git log --abbrev-commit # 只显示简略的commit id<br>git log --pretty=full # 获取全部信息，其实就是默认的git log<br>git log -n # n为一个具体数字，前n条<br></code></pre></td></tr></table></figure><h3 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h3><h4 id="1-默认的-git-reflog-输出"><a href="#1-默认的-git-reflog-输出" class="headerlink" title="1. 默认的 git reflog 输出"></a>1. 默认的 git reflog 输出</h4><p>直接运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">git reflog<br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">abc1234 (HEAD -&gt; main) HEAD@&#123;0&#125;: pull origin main: Fast-forward<br>def5678 HEAD@&#123;1&#125;: commit: 修复登录页面样式<br>ghi9012 HEAD@&#123;2&#125;: reset: moving to HEAD~1<br></code></pre></td></tr></table></figure><p> 时间信息：默认不直接显示时间，但可以通过 HEAD@{n} 的时间引用（如 HEAD@{5.minutes.ago}）间接表示。</p><h4 id="2-显示完整的时间戳"><a href="#2-显示完整的时间戳" class="headerlink" title="2.显示完整的时间戳"></a>2.显示完整的时间戳</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">git reflog --date=iso<br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">abc1234 (HEAD -&gt; main) HEAD@&#123;2023-10-01 15:30:00 +0800&#125;: pull origin main<br>def5678 HEAD@&#123;2023-10-01 14:20:00 +0800&#125;: commit: 修复登录页面样<br></code></pre></td></tr></table></figure><h4 id="3-其他时间格式"><a href="#3-其他时间格式" class="headerlink" title="3. 其他时间格式"></a>3. 其他时间格式</h4><ul><li><p>–date&#x3D;relative：显示相对时间（如「2 hours ago」）</p></li><li><p>–date&#x3D;local：本地时间格式</p></li><li><p>–date&#x3D;unix：Unix 时间戳</p></li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">git reflog --date=relative<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">abc1234 (HEAD -&gt; main) HEAD@&#123;5 minutes ago&#125;: pull origin main<br>def5678 HEAD@&#123;2 hours ago&#125;: commit: 修复登录页面样式<br></code></pre></td></tr></table></figure><h4 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h4><p>时间范围：git reflog 默认保留 90 天内的操作记录（可通过配置调整）。退出git reflog按q即可。</p><h2 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h2><p>回退版本主要有git reset和git revert两种命令</p><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><p>通过reset的方式，把head指针指向之前的某次提交，reset之后，后面的版本就找不到了。例如一共提交了三次分别是A、B、C，此时发现操作失误需要回退到B，则使用reset之后C就不再存在于时间线上了。</p><p>恢复方法：通过时间戳或 HEAD@{n} 定位到误操作前的提交，然后回退：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">git reset --hard HEAD@&#123;5.min<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者：</span><br>git reset --hard abc1234<br></code></pre></td></tr></table></figure><h3 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h3><p>这种方式不会把版本往前回退，而是生成一个新的版本。。例如我们在开发种一共提交了三次分别是A、B、C，此时我们发现操作失误需要回退到B，则使用revert之后会生成一个D版本。</p><p>操作方法为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">git revert -n commit id<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发经验</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于学生优惠</title>
    <link href="/2025/03/19/%E5%85%B3%E4%BA%8E%E5%AD%A6%E7%94%9F%E4%BC%98%E6%83%A0/"/>
    <url>/2025/03/19/%E5%85%B3%E4%BA%8E%E5%AD%A6%E7%94%9F%E4%BC%98%E6%83%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="github学生包"><a href="#github学生包" class="headerlink" title="github学生包"></a>github学生包</h2><p>github学生包全称是叫github student developer pack，是github推出的学生优惠，可以免费使用github的很多服务，包括github pages，github actions，github copilot等等。我个人感觉比较好用的有github pages和github copilot，还有就是域名的免费申请。</p><h3 id="申请地址"><a href="#申请地址" class="headerlink" title="申请地址"></a>申请地址</h3><p><a href="https://education.github.com/">这是github学生包的申请地址</a></p><p><a href="https://education.github.com/pack">这是学生包的具体领取地址</a></p><h3 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h3><p>教育邮箱（即学校发放的<a href="http://edu.cn/">http://edu.cn</a>后缀的邮箱）（非必须）</p><p>以下材料四选一:</p><ul><li>带有学校名称，学校公章（如有），个人信息及有效期的学生证</li><li>带有学校名称，入学日期和学校公章的录取通知书（推荐）</li><li>学信网的个人学籍报告或学校出具的在读证明（最好是学校信纸头的），最好是英文版的（推荐）</li><li>学期课表、成绩单等Github支持的其他认证材料（不推荐，通过率低）</li></ul><h3 id="申请流程"><a href="#申请流程" class="headerlink" title="申请流程"></a>申请流程</h3><ol><li>申请前提需要一个github账号</li><li>打开GitHub benefits</li><li>选择“Student<br><img src="/../images/image.png" alt="alt text"></li><li>输入相关信息:姓名、学校、邮箱（建议输入教育邮箱）、地址等等，还有申请原因（这个随便说说）</li><li>材料认证：这里是最难的一步，本人因为多种原因被卡住过，一共申请提交11次才通过。总的来说，它是让你上交一张能证明你现在是学生的材料，而且现在都要求使用摄像头拍照，电脑好像搞不了还得手机去拍。<br><img src="/../images/image2.png" alt="alt text"></li></ol><h3 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h3><p>本人尝试过贴学生证，一卡通，录取通知书，教育部在线学籍报告都未通过。后来提交的是学校系统可以下载的在读证明（有英文材料），然后上传，审核通过。看过其他其他一些帖子，上传英文版的教育部在线学籍报告（30rmb）也可以通过，但是本人没有试过，不知道是否可行；另外，学生证那些材料，你在上面批注好英文应该也可以通过。（关键:学生信息以及最好有英文版本的容易过）。此外，还有一些别的报错，我都贴出来如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext&#123;style">1. The image you selected does not appear to contain your school name. Your complete school name must appear in your document, not only the school logo. You may include multiple documents together. If your official document is not in English then you may photograph the original next to an English translation.<br>2. Please secure your GitHub account with two-factor authentication. You may need to log out and log back in to GitHub before reapplying.<br>3.The image you captured appears to be a screen display. Please take a clear, live photo of physical documentation confirming your academic enrollment.<br>4.Please complete your GitHub billing information with your full name exactly as it appears in your academic affiliation document. You do not have to add a payment method. You may need to log out and log back in to GitHub before reapplying. If you have only a single legal name, enter it in both the first and last name fields.<br>5.You must configure your browser and operating system to allow location access. You may not use a VPN. If you believe that our information about your school is incomplete or incorrect, then please select ‘My selected school has incorrect or incomplete information e.g. domains or campus location’ option when submitting a GitHub Education support ticket.<br></code></pre></td></tr></table></figure><p>这几个问题主要包括vpn，github信息完善，github两阶段验证等信息方面的问题，还有图片方面的问题，以及这里说一下3,3其实是我最后通过的版本，只不过是我用手机拍了电脑上的证明文件，它说是截图不行，这里只要你把它拍的完整一下，不要漏出电脑其他界面就行了，当然你有打印的版本最好不过了。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>照片认证成功后，github会告诉你，你的权益很快就会到达（本人等了三天左右）;等申请成功后，github会给你发邮件，邮件里会告诉你学生包的截止日期，以及你领取的链接，所以一定要及时查收邮件。</li><li>github学生包的截止日期是1年，所以如果想要续签的话，一定要及时续签，不然你的学生包就会失效。</li><li>github学生包的续签方式有两种，一种是手动续签，另一种是自动续签。手动续签的话，需要在截止日期前手动续签，自动续签的话，你需要在截止日期前自动续签。</li></ol><h2 id="jetbrains学生包"><a href="#jetbrains学生包" class="headerlink" title="jetbrains学生包"></a>jetbrains学生包</h2><p>jetbrains学生包的话，用途主要就是可以用jetbrians的一些好用的IDLE，比如pycharm的专业版，clion（C&#x2F;C++，开发）webstorm，（js开发）等等。喜欢用jetbrains全家桶的必不可少（本人更喜欢vs code一些，感觉jetbrian是更庞大）</p><h3 id="申请地址-1"><a href="#申请地址-1" class="headerlink" title="申请地址"></a>申请地址</h3><p><a href="https://www.jetbrains.com/zh-cn/community/education/#students">这是申请地址</a><br><a href="https://www.jetbrains.com/zh-cn/">jetbrians官网</a></p><h3 id="申请流程-1"><a href="#申请流程-1" class="headerlink" title="申请流程"></a>申请流程</h3><ol><li>首先要有一个jetbrians账户，然后打开jetbrains学生包官网，点击申请。</li><li>填写信息<br>这里有四种认证方法如下:</li></ol><p><img src="/../images/image1.png" alt="jetbrains学生认证">  </p><p>这里面最容易的应该是直接用前面提到的github的学生认证去认证jetbrians，基本都是秒过。如果发生报错的话（基本都是提示邮箱被锁定什么的），可以去github个人setting那儿把自己的教育邮箱先暂时删掉，再申请基本秒过。<br>此外应该是官方文件那个比较容易，里面相比起第一个来说，主要是增加了一个教育部在线认证报告，不过我试过这个没通过（不知道是不是github上面有教育邮箱的原因），看别的帖子说也有教育邮箱滥用的情况，最后还是用github申请的。至于第二个那个国际学生认证我感觉用的应该比较少吧<br>3. 等待审核<br>有的基本是秒通过，有的可能要等几天，注意看邮箱就行。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>有几个参考链接，可以参考一下：<br><a href="https://zhuanlan.zhihu.com/p/578964972">https://zhuanlan.zhihu.com/p/578964972</a><br><a href="https://blog.csdn.net/m0_63451989/article/details/131743070">https://blog.csdn.net/m0_63451989/article/details/131743070</a></p>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>some share</title>
    <link href="/2025/03/14/some-share/"/>
    <url>/2025/03/14/some-share/</url>
    
    <content type="html"><![CDATA[<h2 id="主要软件"><a href="#主要软件" class="headerlink" title="主要软件"></a>主要软件</h2><h3 id="编程开发"><a href="#编程开发" class="headerlink" title="编程开发"></a>编程开发</h3><ul><li>VS code：编程主要是用VS code最多,支持各种插件以及语言，而且很轻量级，启动很快（比起pycharm写py来说我觉得快很多）,另外多个平台都可以用。而且ssh特别好用</li><li>CLion：主要用来写C++，也是Windows和Linux都可以用，jetbrains的这几个idle除了有一点点笨重之外，别的体验都超好，领那个学生认证就可以下载专业版的PyCharm，Clion</li><li>anaconda（or miniconda）: 配置Python虚拟环境还是anaconda稳定</li><li>VS2022:大型项目还得是VS</li><li>Git：版本控制工具，github和gitee都可以用，github的star数多，但是国内访问慢，gitee的访问快，但是star数少，所以可以两个一起用，github用来存一些开源项目，gitee用来存一些自己的项目</li><li>Jupyter Notebook：写Python代码的利器，可以写代码，也可以写markdown，还可以直接运行代码，方便调试</li></ul><h3 id="学习工作"><a href="#学习工作" class="headerlink" title="学习工作"></a>学习工作</h3><ul><li>ollama:大模型本地部署，用ollama+chatbox,ds或者是chatgpt以及其他一些大模型的本地部署都很方便。</li><li>zotero:文献管理，我用这个比较多，主要是用来管理我的论文，还有其他一些资料，然后可以加很多插件，翻译，大模型什么的，也能集成到wps或者是word里面。</li><li>Typora:写markdown的利器，可以实时预览，而且支持latex，很方便。</li><li>Notion:写笔记用</li><li>to do:任务清单</li></ul><h3 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h3><p>VMware pro17:虚拟机，可以用来装一些系统，比如Linux，Windows，MacOS等等<br>MobaXterm:ssh工具，可以连接远程服务器<br>everything:搜索工具，可以快速搜索文件,主要是通过各种通配符去匹配</p><h2 id="一些有用的网址"><a href="#一些有用的网址" class="headerlink" title="一些有用的网址"></a>一些有用的网址</h2><ul><li><a href="https://www.latexlive.com/">latex公式编辑</a></li><li><a href="https://www.autodl.com/console/instance/list">autodl服务器</a></li><li><a href="https://tableconvert.com/zh-cn/latex-generator">表格生成</a></li><li><a href="https://cn.overleaf.com/login">overleaf-latex编写</a></li><li><a href="https://scholar.google.com.hk/?hl=zh-CN">谷歌学术</a>-可能需要梯子</li><li><a href="https://netron.app/">神经网络可视化</a></li><li><a href="https://markdown.com.cn/cheat-sheet.html#%E6%80%BB%E8%A7%88">markdown语法速查</a></li><li><a href="https://www.ipaddress.com/">查站点ip</a></li><li><a href="http://www.ip33.com/dns.html">DNS解析</a></li><li><a href="https://pypi.tuna.tsinghua.edu.cn/simple">清华源镜像</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>demo</title>
    <link href="/2025/03/13/demo/"/>
    <url>/2025/03/13/demo/</url>
    
    <content type="html"><![CDATA[<p>本博客为测试部分的博客 ，用于测试博客的显示效果。</p><p>该博客用hexo开发，主题是fluid，用github pages部署。</p><p>评论模块是用valine实现的，valine的评论都是匿名评论且不需要登陆。也尝试了giscus，但是giscus的评论功能需要登陆github，比较麻烦，所以还是用了valine。不过已经设置了可选评论风格，感觉技术类文章就可以用 giscus了。补充，可能考虑用valine的改进版本waline。</p><h2 id="测试图片"><a href="#测试图片" class="headerlink" title="测试图片"></a>测试图片</h2><p><img src="/../images/test.jpg" alt="图片"></p><h2 id="测试代码块"><a href="#测试代码块" class="headerlink" title="测试代码块"></a>测试代码块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br></code></pre></td></tr></table></figure><h2 id="测试数学公式"><a href="#测试数学公式" class="headerlink" title="测试数学公式"></a>测试数学公式</h2><p>$$<br>\sum_{i&#x3D;1}^{n}i^2 &#x3D; \frac{n(n+1)(2n+1)}{6}<br>$$</p><h2 id="测试引用"><a href="#测试引用" class="headerlink" title="测试引用"></a>测试引用</h2><blockquote><p>这是引用的内容</p></blockquote><h2 id="测试表格"><a href="#测试表格" class="headerlink" title="测试表格"></a>测试表格</h2><table><thead><tr><th>姓名</th><th>年龄</th><th>性别</th></tr></thead><tbody><tr><td>张三</td><td>18</td><td>男</td></tr><tr><td>李四</td><td>19</td><td>女</td></tr><tr><td>王五</td><td>20</td><td>男</td></tr><tr><td>赵六</td><td>21</td><td>女</td></tr></tbody></table><h2 id="测试链接"><a href="#测试链接" class="headerlink" title="测试链接"></a>测试链接</h2><p><a href="https://www.baidu.com/">百度</a></p><h2 id="测试列表"><a href="#测试列表" class="headerlink" title="测试列表"></a>测试列表</h2><ul><li>列表1</li><li>列表2</li><li>列表3</li></ul><h2 id="测试分割线"><a href="#测试分割线" class="headerlink" title="测试分割线"></a>测试分割线</h2><hr><h2 id="测试转义字符"><a href="#测试转义字符" class="headerlink" title="测试转义字符"></a>测试转义字符</h2><p><em>斜体</em></p><p><strong>粗体</strong></p><p><del>删除线</del></p>]]></content>
    
    
    <categories>
      
      <category>开发经验</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
